@page "/cropper"
@inject IJSRuntime JSRuntime;

<h1>Cropper</h1>
<InputFile id="input1" OnChange="OnInputFileChange"></InputFile>
@if (parsing)
{
    <center>
        <h2>@prompt</h2>
    </center>
}
@if (!string.IsNullOrEmpty(imgUrl)&&!parsing)
{
    <center>
        <h2>Crop Result:</h2>
        <img src="@imgUrl" />
    </center>
}
@if (file != null)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Modal title</p>
                <button class="delete" aria-label="close" @onclick="()=>file=null"></button>
            </header>
            <section class="modal-card-body">
                <Cropper MaxCropedHeight="128" MaxCropedWidth="128" Proportion="proportion==0?1:proportion" RequireProportion="bool.Parse(enableProportion)" InputId="input1" ImageFile="file" OnCrop="OnCropedAsync"></Cropper>
            </section>
        </div>
    </div>
}
<select @bind-value="enableProportion" @bind-value:event="onchange">
    <option value="true">Enable proportion</option>
    <option value="false">Disable proportion</option>
</select>
@if (bool.Parse(enableProportion))
{
    <input type="number" @bind-value="proportion" placeholder="proportion"/>
}
@code {
    IBrowserFile file;
    string imgUrl = "";
    Image image;
    string prompt = "Image cropped! Parsing to base64...";
    bool parsing = false;
    string enableProportion = "false";
    double proportion = 1d;
    protected override void OnInitialized()
    {
        
        base.OnInitialized();
    }
    
    void OnInputFileChange(InputFileChangeEventArgs args)
    {
        image?.Dispose();
        file = args.File;
    }
    async Task OnCropedAsync(ImageCroppedEventArgs args)
    {
        file = null;
        parsing = true;
        base.StateHasChanged();
        await Task.Delay(10);// a hack, otherwise prompt won't show
        image?.Dispose();
        await JSRuntime.InvokeVoidAsync("console.log", "converted!");
        image = args.Image;
        imgUrl = args.Image.ToBase64String(args.Format);
        parsing = false;
    }
}
