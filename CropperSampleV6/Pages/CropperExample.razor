@page "/"
@inject IJSRuntime JSRuntime;

<h1>Cropper</h1>
<InputFile id="input1" OnChange="OnInputFileChange"></InputFile>
@if (parsing)
{
    <center>
        <h2>@prompt</h2>
    </center>
}
@if (!string.IsNullOrEmpty(imgUrl) && !parsing)
{
    <center>
        <h2>Crop Result:</h2>
        <img src="@imgUrl" />
    </center>
}
@if (file != null)
{
    <div class="card">
        <div class="card-body">
            <Cropper CropperHeight="500" MaxCropedHeight="500" MaxCropedWidth="500"
                 @ref="cropper"
                 AspectRatio="proportion==0?1:proportion"
                 RequireAspectRatio="bool.Parse(enableProportion)"
                 InputId="input1"
                 ImageFile="file"
                 @bind-Ratio="ratio"
                 AnimeGifEnable="true"></Cropper>
        </div>
        <div class="card-footer">
            <button class="btn btn-success mr-1" @onclick="DoneCrop">Done</button>

            @if (cropper != null)
            {
                <input type="range" min="@(cropper.MinRatio*100)" max="@(cropper.MaxRatio*100)" value="@(ratio*100)" @oninput="OnRatioChange" />
            }

            <button class="btn btn-danger" aria-label="close" @onclick="()=>file=null">Close</button>

        </div>
    </div>
}
<select @bind-value="enableProportion" @bind-value:event="onchange">
    <option value="true">Enable proportion</option>
    <option value="false">Disable proportion</option>
</select>
@if (bool.Parse(enableProportion))
{
    <input type="number" @bind-value="proportion" placeholder="proportion" />
}
@code {
    Cropper cropper;
    IBrowserFile file;
    string imgUrl = "";
    string prompt = "Image cropped! Parsing to base64...";
    bool parsing = false;
    string enableProportion = "false";
    double proportion = 1d;
    double ratio = 1;

    void OnRatioChange(ChangeEventArgs args)
    {
        ratio = int.Parse(args.Value.ToString()) / 100.0;
    }

    protected override void OnInitialized()
    {

        base.OnInitialized();
    }

    void OnInputFileChange(InputFileChangeEventArgs args)
    {
        file = args.File;
    }
    async Task DoneCrop()
    {
        var args = await cropper.GetCropedResult();
        file = null;
        parsing = true;
        base.StateHasChanged();
        await Task.Delay(10);// a hack, otherwise prompt won't show
        await JSRuntime.InvokeVoidAsync("console.log", "converted!");
        var base64string = await args.GetBase64Async();
        imgUrl = $"data:image/png;base64,{base64string}";

        args.Dispose();
        parsing = false;
    }
}