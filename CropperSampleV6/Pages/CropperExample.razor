@page "/"
@inject IJSRuntime JSRuntime;

<h1>Cropper</h1>
<div class="mb-3">
    <InputFile class="form-control form-control-lg" id="input1" OnChange="OnInputFileChange"></InputFile>
</div>
@if (parsing)
{
    <center>
        <h2>@prompt</h2>
    </center>
}
@if (!string.IsNullOrEmpty(imgUrl) && !parsing)
{
    <div class="card">
        <div class="card-header">
            <h3 class="mb-0">
                <strong>Image Preview</strong>
            </h3>
        </div>
        <div class="card-body">
            <center>
                <img class="img-fluid" src="@imgUrl" />
            </center>
        </div>
    </div>
}
@if (file != null)
{
    <div class="card">
        <div class="card-body py-0">
            <Cropper CropperHeight="500" MaxCropedHeight="500" MaxCropedWidth="500"
                 @ref="cropper"
                 AspectRatio="AspectRatio"
                 RequireAspectRatio="IsAspectRatioEnabled"
                 InputId="input1"
                 ImageFile="file"
                 @bind-Ratio="ratio"
                 AnimeGifEnable="true"></Cropper>
        </div>
        <div class="card-footer text-center justify-content-center">
            @if (cropper != null)
            {
                <input type="range" min="@(cropper.MinRatio*100)" max="@(cropper.MaxRatio*100)"
               value="@(ratio*100)" @oninput="OnRatioChange" placeholder="Zoom range" />
            }
        </div>
        <div class="card-footer">
            <div class="input-group">
                <div class="input-group-text">
                    <input @bind="IsAspectRatioEnabled" class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
                </div>
                <span class="input-group-text">Aspect Ratio</span>
                <input @bind-value="AspectRatio" type="number" class="form-control" placeholder="Enter width">
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-success mr-1" @onclick="DoneCrop">Done</button>
            <button class="btn btn-danger" aria-label="close" @onclick="()=>file=null">Close</button>

        </div>
    </div>
}

@code {
    Cropper cropper;
    IBrowserFile file;
    string imgUrl = "";
    string prompt = "Image cropped! Parsing to base64...";
    bool parsing = false;
    private bool IsAspectRatioEnabled { get; set; }
    private double AspectRatio { get; set; } = 1d;
    double ratio = 1;

    void OnRatioChange(ChangeEventArgs args)
    {
        ratio = int.Parse(args.Value.ToString()) / 100.0;
    }

    protected override void OnInitialized()
    {

        base.OnInitialized();
    }

    void OnInputFileChange(InputFileChangeEventArgs args)
    {
        file = args.File;
    }
    async Task DoneCrop()
    {
        var args = await cropper.GetCropedResult();
        file = null;
        parsing = true;
        base.StateHasChanged();
        await Task.Delay(10);// a hack, otherwise prompt won't show
        await JSRuntime.InvokeVoidAsync("console.log", "converted!");
        var base64string = await args.GetBase64Async();
        imgUrl = $"data:image/png;base64,{base64string}";

        args.Dispose();
        parsing = false;
    }
}