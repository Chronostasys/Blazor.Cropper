<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazor.Cropper</name>
    </assembly>
    <members>
        <member name="T:Blazor.Cropper.CropInfo">
            <summary>
            Crop metadata
            </summary>
        </member>
        <member name="P:Blazor.Cropper.CropInfo.Rectangle">
            <summary>
            Crop zone in pixel (for original image)
            </summary>
        </member>
        <member name="P:Blazor.Cropper.CropInfo.Ratio">
            <summary>
            ratio
            </summary>
        </member>
        <member name="P:Blazor.Cropper.CropInfo.ResizeProp">
            <summary>
            resizeprop
            </summary>
        </member>
        <member name="M:Blazor.Cropper.CropInfo.GetInitParams">
            <summary>
            Get init parameters from this function to restore the cropper state
            note that the data returned from this function is in physical pixel
            </summary>
            <returns></returns>
        </member>
        <member name="P:Blazor.Cropper.Cropper.PureCSharpProcessing">
            <summary>
            whether use c# for ordinary img processing
            </summary>
            <value>default: false</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.IsImageLocked">
            <summary>
            If this property is true, the image will become
            unresizable in cropper
            </summary>
            <value>default: true</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.InitCropWidth">
            <summary>
            the initial width of cropper if possible.
            shall not be smaller than 30.
            </summary>
            <remarks>It's unit is not pixel. For more info, see <seealso cref="M:Blazor.Cropper.CropInfo.GetInitParams"/></remarks>
            <value>default: 150</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.InitCropHeight">
            <summary>
            the initial height of cropper if possible.
            shall not be smaller than 30.
            </summary>
            <remarks>It's unit is not pixel. For more info, see <seealso cref="M:Blazor.Cropper.CropInfo.GetInitParams"/></remarks>
            <value>default: 150</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.RequireAspectRatio">
            <summary>
            sepecify whether the cropper's aspect ratio is fixed
            </summary>
            <value>default: false</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.AspectRatio">
            <summary>
            sepecify the cropper's aspect ratio
            </summary>
            <remarks>Only works when <see cref="P:Blazor.Cropper.Cropper.RequireAspectRatio"/>
            is true</remarks>
            <value>default: 1</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.ImageFile">
            <summary>
            The input image file. Usually get from an
            <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile"/> Component. You can also
            mock a file from stream using <see cref="T:Blazor.Cropper.StreamFile"/> if needed.
            </summary>
            <value></value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.OnLoad">
            <summary>
            Fire when the image file load into cropper
            </summary>
            <value></value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.AnimeGifEnable">
            <summary>
            Set whether the anime gif crop is enabled. If enabled,
            the gif file smaller than 1mb would 
            be cropped as animed image. If disabled, only the first
            frame would be cropped.
            </summary>
            <remarks>Crop large gif image can cause the window stop responding
            for half a minute!</remarks>
            <value>default: true</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.InputId">
            <summary>
            The input element's id value. This param is optional and
            can help cropper to init image
            faster on browser.
            Does't have effect if <see cref="P:Blazor.Cropper.Cropper.PureCSharpProcessing"/> is true.
            </summary>
        </member>
        <member name="P:Blazor.Cropper.Cropper.MaxCropedHeight">
            <summary>
            Max allowed crop result height. Should not be larger than 500.
            </summary>
            <value>default:500</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.MaxCropedWidth">
            <summary>
            Max allowed crop result width. Should not be larger than 500.
            </summary>
            <value>default:500</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.CropperHeight">
            <summary>
            Height of this component in px
            </summary>
            <value>default:150</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.IsCropLocked">
            <summary>
            Whether the cropper size is locked
            </summary>
            <value>default: false</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.Ratio">
            <summary>
            The scaling ratio, should be bind two way.
            </summary>
            <value>default: 1.0</value>
        </member>
        <member name="P:Blazor.Cropper.Cropper.RatioChanged">
            <summary>
            Fire when scaling ratio changed by touch event.
            </summary>
        </member>
        <member name="P:Blazor.Cropper.Cropper.OnSizeChanged">
            <summary>
            Fire when cropper size changed. 
            Item1 of the return tuple is width, Item2 is height
            </summary>
        </member>
        <member name="P:Blazor.Cropper.Cropper.OffsetX">
            <summary>
            Used to set the cropper initial offset position.
            </summary>
            <remarks>It's unit is not pixel. For more info, see <seealso cref="M:Blazor.Cropper.CropInfo.GetInitParams"/></remarks>
        </member>
        <member name="P:Blazor.Cropper.Cropper.OffsetY">
            <summary>
            Used to set the cropper initial offset position.
            </summary>
            <remarks>It's unit is not pixel. For more info, see <seealso cref="M:Blazor.Cropper.CropInfo.GetInitParams"/></remarks>
        </member>
        <member name="P:Blazor.Cropper.Cropper.MinRatio">
            <summary>
            Min allowed scaling ratio
            </summary>
            <value>1.0</value>
        </member>
        <member name="M:Blazor.Cropper.Cropper.GetCropedResult">
            <summary>
            Get the crop result.
            </summary>
            <returns>crop result</returns>
        </member>
        <member name="M:Blazor.Cropper.Cropper.GetCropInfo">
            <summary>
            Returns the metadata about the cropper state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blazor.Cropper.ImageCroppedResult.GetDataAsync">
            <summary>
            get image bytes
            </summary>
            <returns>image bytes</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Blazor.Cropper.ImageCroppedResult.SaveAsync(System.IO.Stream)">
            <summary>
            save img data to stream
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Blazor.Cropper.JSInterop">
            <summary>
            js interop methods
            </summary>
        </member>
        <member name="M:Blazor.Cropper.JSInterop.SetImageAsync(Microsoft.JSInterop.IJSRuntime,System.Byte[],System.String)">
            <summary>
            set html img element to display the image
            this function is the preferred way to display the crop result in dotnet 6
            </summary>
            <param name="js"></param>
            <param name="bin">image bytes</param>
            <param name="imgid">img element id</param>
            <returns></returns>
        </member>
        <member name="T:Blazor.Cropper.StreamFile">
            <summary>
            mock a browserfile from a stream
            </summary>
        </member>
        <member name="M:Blazor.Cropper.StreamFile.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Build a stream file
            </summary>
            <param name="stream"></param>
            <param name="name"></param>
            <param name="contentType"></param>
        </member>
        <member name="P:Blazor.Cropper.StreamFile.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:Blazor.Cropper.StreamFile.LastModified">
            <summary>
            not impl
            </summary>
        </member>
        <member name="P:Blazor.Cropper.StreamFile.Size">
            <summary>
            stream size
            </summary>
        </member>
        <member name="P:Blazor.Cropper.StreamFile.ContentType">
            <summary>
            content type, should in form of image/xxx
            </summary>
        </member>
        <member name="M:Blazor.Cropper.StreamFile.OpenReadStream(System.Int64,System.Threading.CancellationToken)">
            <summary>
            open read stream
            </summary>
            <param name="maxAllowedSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
