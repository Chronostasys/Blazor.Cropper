@inject IJSRuntime JSRuntime;
<div id="blazor_cropper" class="image-list unSelectAble" style="@imglistStyle" >
    <img id="oriimg" class="imgbac" draggable="false" src="" style="@backgroundImgStyle"
        @ontouchend="(args)=>{
                 if(onTwoFingerResizing||isBacMoving)
                 {
                     isBacMoving = false;
                     onTwoFingerResizing=false;
                     InitBox();
                 }
             }"
        @ontouchmove:stopPropagation
        @ontouchstart:stopPropagation
        @ontouchmove="OnResizeBackGroundImage"
        @ontouchstart="args=>{
                   prevBacX = args.Touches[0].ClientX;
                   prevBacY = args.Touches[0].ClientY;
                   isBacMoving = true;
               }"
        @onmousedown="args=>{
                  prevBacX = args.ClientX;
                  prevBacY = args.ClientY;
                  isBacMoving = true;
              }"/>
    @* 裁剪框  *@
    <div draggable="false" id="mainBox" @ontouchstart:stopPropagation
        @ontouchend="args=> OnSizeChangeEnd(TouchToMouse(args))"
        style="@cropperStyle">
        <div id="left-up" class="minBox left-up" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.UpLeft)" @onmousedown="args=> OnResizeStart(args,MoveDir.UpLeft)"></div>
        <div id="up" class="minBox up" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.Up)" @onmousedown="args=> OnResizeStart(args,MoveDir.Up)"></div>
        <div id="right-up" class="minBox right-up" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.UpRight)" @onmousedown="args=> OnResizeStart(args,MoveDir.UpRight)"></div>
        <div id="left" class="minBox left" @onmousedown="args=> OnResizeStart(args,MoveDir.Left)" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.Left)"></div>
        <div id="right" class="minBox right" @onmousedown="args=> OnResizeStart(args,MoveDir.Right)" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.Right)"></div>
        <div id="left-down" class="minBox left-down" @onmousedown="args=> OnResizeStart(args,MoveDir.DownLeft)" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.DownLeft)"></div>
        <div id="down" class="minBox down" @onmousedown="args=> OnResizeStart(args,MoveDir.Down)" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.Down)"></div>
        <div id="right-down" class="minBox right-down" @onmousedown="args=> OnResizeStart(args,MoveDir.DownRight)" @ontouchstart="args=> OnResizeStart(TouchToMouse(args),MoveDir.DownRight)"></div>
    </div>
    <img id="dimg" @onmousedown="OnDragStart" @ontouchstart="args=> OnDragStart(TouchToMouse(args))"
        @ontouchend="args=> OnDragEnd(TouchToMouse(args))"
        class="img" draggable="false"  style="@(backgroundImgStyle+cropedImgStyle)" src="" @ontouchstart:stopPropagation />
</div>

@code {

    #region params

    /// <summary>
    /// whether use c# for ordinary img processing
    /// </summary>
    /// <value>default: false</value>
    [Parameter]
    public bool PureCSharpProcessing { get; set; } = false;
    /// <summary>
    /// the initial width of cropper if possible
    /// </summary>
    /// <value>default: 150</value>
    [Parameter]
    public double InitCropWidth { get; set; } = 150;
    double initCropWidth = -1;
    /// <summary>
    /// the initial height of cropper if possible
    /// </summary>
    /// <value>default: 150</value>
    [Parameter]
    public double InitCropHeight { get; set; } = 150;
    double initCropHeight = -1;
    /// <summary>
    /// sepecify whether the cropper's aspect ratio is fixed
    /// </summary>
    /// <value>default: false</value>
    [Parameter]
    public bool RequireAspectRatio { get; set; } = false;
    /// <summary>
    /// sepecify the cropper's aspect ratio
    /// </summary>
    /// <remarks>Only works when <see cref="RequireAspectRatio"/> is true</remarks>
    /// <value>default: 1</value>
    [Parameter]
    public double AspectRatio { get; set; } = 1;
    /// <summary>
    /// The input image file. Usually get from an <see cref="InputFile"/> Component. You can also
    /// mock a file from stream using <see cref="StreamFile"/> if needed.
    /// </summary>
    /// <value></value>
    [Parameter]
    public IBrowserFile ImageFile { get; set; }
    /// <summary>
    /// Fire when the image file load into cropper
    /// </summary>
    /// <value></value>
    [Parameter]
    public EventCallback OnLoad { get; set; }
    /// <summary>
    /// Set whether the anime gif crop is enabled. If enabled, the gif file smaller than 1mb would 
    /// be cropped as animed image. If disabled, only the first frame would be cropped.
    /// </summary>
    /// <remarks>Resizing gif image can cause the window stop responding for half a minute!</remarks>
    /// <value>default: true</value>
    [Parameter]
    public bool AnimeGifEnable { get; set; } = true;
    /// <summary>
    /// The input element's id value. This param is optional and can help cropper to init image
    /// faster on browser.
    /// Does't have effect if <see cref="PureCSharpProcessing"/> is true.
    /// </summary>
    [Parameter]
    public string InputId { get; set; }
    /// <summary>
    /// Max allowed crop result height. Should not be larger than 500.
    /// </summary>
    /// <value>default:500</value>
    [Parameter]
    public double MaxCropedHeight { get; set; } = 500;
    /// <summary>
    /// Max allowed crop result width. Should not be larger than 500.
    /// </summary>
    /// <value>default:500</value>
    [Parameter]
    public double MaxCropedWidth { get; set; } = 500;
    /// <summary>
    /// Height of this component in px
    /// </summary>
    /// <value>default:150</value>
    [Parameter]
    public double CropperHeight { get; set; } = 150;
    /// <summary>
    /// Whether the cropper size is locked
    /// </summary>
    /// <value>default: false</value>
    [Parameter]
    public bool IsCropLocked { get; set; } = false;
    /// <summary>
    /// The scaling ratio, should be bind two way.
    /// </summary>
    /// <value>default: 1.0</value>
    [Parameter]
    public double Ratio
    {
        get => ratio;
        set
        {
            if (value == ratio)
                return;

            ratio = value;
            RatioChanged.InvokeAsync(value);
        }
    }
    /// <summary>
    /// Fire when scaling ratio changed by touch event.
    /// </summary>
    [Parameter]
    public EventCallback<double> RatioChanged { get; set; }
    /// <summary>
    /// Fire when cropper size changed. 
    /// Item1 of the return tuple is width, Item2 is height
    /// </summary>
    [Parameter]
    public EventCallback<(double,double)> OnSizeChanged {get;set;}
    #endregion


    #region public vars
    /// <summary>
    /// Max allowed scaling ratio
    /// </summary>
    /// <value></value>
    public double MaxRatio { get; private set; }
    /// <summary>
    /// Min allowed scaling ratio
    /// </summary>
    /// <value>1.0</value>
    public double MinRatio { get => 1.0; }
    #endregion


    #region private props
    bool widerThanContainer
    {
        get => (double)image.Width / (double)image.Height > imgContainerWidth / imgContainerHeight;
    }
    double imgRealW
    {
        get
        {
            if (widerThanContainer)
            {
                return imgContainerWidth * imgSize / 100;
            }
            else
            {
                return imgContainerHeight * imgSize / 100 * (double)image.Width / image.Height;
                @* deltaY = -(int)(imgContainerHeight/i-image.Height)/2; *@
            }
        }
    }
    double imgRealH
    {
        get
        {
            if (widerThanContainer)
            {
                return imgContainerWidth * imgSize / 100 * (double)image.Height / image.Width;
            }
            else
            {
                return imgContainerHeight * imgSize / 100;
            }
        }
    }
    string backgroundImgStyle
    {
        get => $"left:{bacx}px;top: {bacy}px;height:{imgSize}%;";
    }
    string imglistStyle
    {
        get => $"height:{CropperHeight}px;";
    }
    #endregion


    #region vars
    double prevBacX = 0;
    double prevBacY = 0;
    double bacx = 0;
    double bacy = 0;
    double imgSize = 100;
    bool onTwoFingerResizing = false;
    bool isBacMoving = false;
    double prevTouchPointDistance = -1;
    double imgContainerWidth = 500;
    double imgContainerHeight = 150;
    double prevPosX = 0;
    double prevPosY = 0;
    double layoutX = 0;
    double layoutY = 0;
    double offsetX;
    double offsetY;
    string cropperStyle = "";
    string cropedImgStyle = "clip: rect(0, 150px, 150px, 0);";
    bool dragging = false;
    bool reSizing = false;
    MoveDir dir = MoveDir.UnKnown;
    double minval = 30;
    ImageData image;
    double minposX;
    double minposY;
    double imgw;
    double imgh;
    double unsavedX;
    double unsavedY;
    double unsavedCropW;
    double unsavedCropH;
    bool outOfBox = false;
    IBrowserFile prevFile;
    IImageFormat format;
    Image gifimage;
    double ratio = 1d;

    #endregion


    #region static actions
    static Action setaction;
    static Action<MouseEventArgs> mouseMoveAction;
    static Action<MouseEventArgs> touchMoveAction;
    static Action<MouseEventArgs> touchEndAction;
    static Action<MouseEventArgs> mouseUpAction;
    #endregion



    #region Override methods
    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("addCropperEventListeners");
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (initCropWidth<0)
        {
            initCropWidth = InitCropWidth;
            initCropHeight = InitCropHeight;
        }
    }
    double prevR = 1d;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Ratio!=prevR&&MinRatio <= Ratio && Ratio <= MaxRatio && !onTwoFingerResizing)
        {
            prevR = Ratio;
            var temp = imgSize;
            imgSize = Ratio * 100;
            if (widerThanContainer)
            {
                minposX = 0;
                minposY = (imgContainerHeight - imgRealH) / 2;
            }
            else
            {
                minposY = 0;
                minposX = (imgContainerWidth - imgRealW) / 2;
            }
            minposY += bacy - (imgSize - temp) / imgSize * imgRealH / 2;
            minposX += bacx;
            if (prevPosX + initCropWidth > minposX + imgRealW || prevPosX < minposX
                || prevPosY + initCropHeight > minposY + imgRealH || prevPosY < minposY)
            {
                imgSize = temp;
                Ratio = imgSize / 100;
            }
            else
            {
                bacy -= (imgSize - temp) / imgSize * imgRealH / 2;
                layoutY -= (imgSize - temp) / imgSize * imgRealH / 2;
                SetCroppedImgStyle();
            }
            @*SetCropperStyle();*@
        InitBox();
        @*prevPosY = bacy + prevPosY - layoutY;
        prevPosX = prevPosX - layoutX + bacx;*@
        }
        if (RequireAspectRatio)
        {
            if (initCropHeight > initCropWidth * AspectRatio)
            {
                initCropHeight = initCropWidth * AspectRatio;
            }
            else
            {
                initCropWidth = initCropHeight / AspectRatio;
            }
            SetCropperStyle();
            SetCroppedImgStyle();
        }
        if (prevFile == ImageFile)
        {
            return;
        }
        else
        {
            prevFile = ImageFile;
        }
        var ext = ImageFile.Name.Split('.').Last().ToLower();
        var resizedImageFile = ImageFile;
        await Task.Delay(10);


        gifimage?.Dispose();
        if (PureCSharpProcessing||string.IsNullOrEmpty(InputId)||(ext == "gif" && AnimeGifEnable))
        {
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(100000000).ReadAsync(buffer);
            if((ext == "gif" && AnimeGifEnable)||PureCSharpProcessing)
            {
                gifimage = Image.Load(buffer, out format);
                await JSRuntime.InvokeVoidAsync("setImgSrc", buffer, format.DefaultMimeType);
            }
            else
                await JSRuntime.InvokeVoidAsync("setImgSrc", buffer, "image/"+ext);
        }
        else
            await JSRuntime.InvokeVoidAsync("setImg", InputId);
        var data = new double[] { 0, 0 };
        while (data[0] == 0d)
        {
            await Task.Delay(10);
            data = await JSRuntime.InvokeAsync<double[]>("getOriImgSize");
        }
        image = new ImageData
        {
            Width = data[0],
            Height = data[1]
        };
        await SetImgContainterSize();
        MaxRatio = imgContainerWidth / imgRealW;
        Ratio = imgSize / 100;
        await OnLoad.InvokeAsync();
        await SizeChanged();
    }
    protected override async Task OnAfterRenderAsync(bool first)
    {
        await base.OnAfterRenderAsync(first);
        if (first)
        {
            setaction = () => SetImgContainterSize();
            mouseMoveAction = args =>
            {
                OnSizeChanging(args);
                OnResizeBackGroundImage(MouseToTouch(args));
            };
            mouseUpAction = args =>
            {
                if (onTwoFingerResizing || isBacMoving)
                {
                    isBacMoving = false;
                    onTwoFingerResizing = false;
                    InitBox();
                }
                OnSizeChangeEnd(args);
            };
            touchMoveAction = OnSizeChanging;
            touchEndAction = (args) =>
            {
                outOfBox = true;
                OnSizeChangeEnd(args);
            };
        }
    }
    #endregion

    #region JsInvokable methods
    [JSInvokable("OnTouchEnd")]
    public static void TouchEndCaller(MouseEventArgs args)
    {
        touchEndAction?.Invoke(args);
    }
    [JSInvokable("OnTouchMove")]
    public static void TouchMoveCaller(MouseEventArgs args)
    {
        touchMoveAction?.Invoke(args);
    }
    [JSInvokable("OnMouseUp")]
    public static void MouseUpCaller(MouseEventArgs args)
    {
        mouseUpAction?.Invoke(args);
    }
    [JSInvokable("OnMouseMove")]
    public static void MouseMoveCaller(MouseEventArgs args)
    {
        mouseMoveAction?.Invoke(args);
    }
    [JSInvokable("SetWidthHeight")]
    public static void SetWidthHeightCaller()
    {
        setaction?.Invoke();
    }
    #endregion


    #region Public methods
    /// <summary>
    /// Get the crop result.
    /// </summary>
    /// <returns>crop result</returns>
    public async Task<ImageCroppedResult> GetCropedResult()
    {
        var deltaX = 0;
        var deltaY = 0;
        var i = 0d;

        if (widerThanContainer)
        {
            var containerWidth = imgContainerWidth * imgSize / 100;
            i = containerWidth / image.Width;
            deltaY = -(int)(imgContainerHeight / i - image.Height) / 2;
        }
        else
        {
            var containerHeight = imgContainerHeight * imgSize / 100;
            i = containerHeight / image.Height;
            deltaX = -(int)(imgContainerWidth / i - image.Width) / 2;
        }
        var resizeProp = 1d;
        var cw = (initCropWidth / i);
        var ch = (initCropHeight / i);
        if (cw > MaxCropedWidth || ch > MaxCropedHeight)
        {
            if (MaxCropedWidth / MaxCropedHeight > (double)cw / (double)ch)
            {
                resizeProp = MaxCropedHeight / ch;
            }
            else
            {
                resizeProp = MaxCropedWidth / cw;
            }
        }
        if (gifimage == null)
        {
            var s = await JSRuntime.InvokeAsync<string>("cropAsync", "oriimg", (int)((prevPosX - bacx) / i + deltaX), (int)((prevPosY - bacy) / i + deltaY),
                (int)(cw), (int)(ch), 0, 0, (int)(cw * resizeProp), (int)(ch * resizeProp),"image/png");
            return new ImageCroppedResult(s);
        }
        else
        {
            var img = gifimage.Clone(ctx =>
            {
                ctx.Crop(new Rectangle((int)((prevPosX - bacx) / i + deltaX), (int)((prevPosY - bacy) / i + deltaY), (int)(cw), (int)(ch)));
                if (resizeProp != 1d)
                {
                    ctx.Resize(new Size((int)(cw * resizeProp), (int)(ch * resizeProp)));
                }
            });
            return new ImageCroppedResult(img, format);
        }
    }
    #endregion


    #region private methods

    double GetI()
    {
        double i = 0d;
        if (widerThanContainer)
        {
            var containerWidth = imgContainerWidth * imgSize / 100;
            i = containerWidth / image.Width;
        }
        else
        {
            var containerHeight = imgContainerHeight * imgSize / 100;
            i = containerHeight / image.Height;
        }
        return i;
    }
    void SetCroppedImgStyle()
    {
        cropedImgStyle =$"clip: rect({prevPosY - layoutY}px, {prevPosX - layoutX + initCropWidth}px, {prevPosY - layoutY + initCropHeight}px, {prevPosX - layoutX}px);";
    }
    void SetCropperStyle()
    {
        cropperStyle = $"top:{prevPosY}px;left:{prevPosX}px;cursor:move;height:{initCropHeight}px;width:{initCropWidth}px";
    }

    MouseEventArgs TouchToMouse(TouchEventArgs args)
    {
        try
        {
            return new MouseEventArgs()
            {
                ClientX = args.Touches[0].ClientX,
                ClientY = args.Touches[0].ClientY
            };
        }
        catch (System.Exception)
        {
            outOfBox = true;
            return new MouseEventArgs();
        }
    }

    void OnDragStart(MouseEventArgs args)
    {
        outOfBox = false;
        if (reSizing)
        {
            return;
        }
        SetCropperStyle();
        offsetX = args.ClientX;
        offsetY = args.ClientY;
        dragging = true;
    }
    void OnDragging(MouseEventArgs args)
    {
        if (dragging && !reSizing)
        {
            var x = prevPosX - offsetX + args.ClientX;
            var y = prevPosY - offsetY + args.ClientY;
            if (y < minposY)
            {
                outOfBox = true;
                y = minposY;
            }
            if (x < minposX)
            {
                outOfBox = true;
                x = minposX;
            }
            if (y + initCropHeight > (minposY + imgh))
            {
                outOfBox = true;
                y = (minposY + imgh) - initCropHeight;
            }
            if (x + initCropWidth > (minposX + imgw))
            {
                outOfBox = true;
                x = (minposX + imgw) - initCropWidth;
            }
            unsavedX = x;
            unsavedY = y;
            cropperStyle = $"top:{y}px;left:{x}px;height:{initCropHeight}px;width:{initCropWidth}px";
            cropedImgStyle = $"clip: rect({y - layoutY}px, {x - layoutX + initCropWidth}px, {y - layoutY + initCropHeight}px, {x - layoutX}px);";
            base.StateHasChanged();
        }
    }
    void OnDragEnd(MouseEventArgs args)
    {
        dragging = false;
        OnDragging(args);
        if (outOfBox)
        {
            prevPosX = unsavedX;
            prevPosY = unsavedY;
            return;
        }
        prevPosX = prevPosX - offsetX + args.ClientX;
        prevPosY = prevPosY - offsetY + args.ClientY;
    }
    void OnResizeStart(MouseEventArgs args, MoveDir dir)
    {
        outOfBox = false;
        this.dir = dir;
        if (dragging)
        {
            return;
        }
        SetCropperStyle();
        offsetX = args.ClientX;
        offsetY = args.ClientY;
        if (IsCropLocked && !isBacMoving && !onTwoFingerResizing)
        {
            OnDragStart(args);
            return;
        }
        reSizing = true;
    }
    void OnSizeChanging(MouseEventArgs args)
    {
        if (reSizing && !dragging)
        {
            var delta = args.ClientY - offsetY;
            var deltaX = args.ClientX - offsetX;
            var ytemp = prevPosY;
            var tempCropHeight = initCropHeight;
            var xtemp = prevPosX;
            var tempCropWidth = initCropWidth;
            switch (dir)
            {
                case MoveDir.Up:
                    {
                        ytemp = prevPosY + delta;
                        tempCropHeight = initCropHeight - delta;
                        if (RequireAspectRatio)
                        {
                            tempCropWidth = tempCropHeight / AspectRatio;
                        }
                        break;
                    }
                case MoveDir.Down:
                    {
                        tempCropHeight = initCropHeight + delta;
                        if (RequireAspectRatio)
                        {
                            tempCropWidth = tempCropHeight / AspectRatio;
                        }
                        break;
                    }
                case MoveDir.Left:
                    {
                        xtemp = prevPosX + deltaX;
                        tempCropWidth = initCropWidth - deltaX;
                        if (RequireAspectRatio)
                        {
                            tempCropHeight = tempCropWidth * AspectRatio;
                        }
                        break;
                    }
                case MoveDir.Right:
                    {
                        tempCropWidth = initCropWidth + deltaX;
                        if (RequireAspectRatio)
                        {
                            tempCropHeight = tempCropWidth * AspectRatio;
                        }
                        break;
                    }
                case MoveDir.UpLeft:
                    {
                        ytemp = prevPosY + delta;
                        tempCropHeight = initCropHeight - delta;
                        tempCropWidth = initCropWidth - deltaX;
                        if (RequireAspectRatio)
                        {
                            tempCropWidth = tempCropHeight / AspectRatio;
                            deltaX = initCropWidth - tempCropWidth;
                        }
                        xtemp = prevPosX + deltaX;
                        break;
                    }
                case MoveDir.UpRight:
                    {
                        ytemp = prevPosY + delta;
                        tempCropHeight = initCropHeight - delta;
                        tempCropWidth = initCropWidth + deltaX;
                        if (RequireAspectRatio)
                        {
                            tempCropWidth = tempCropHeight / AspectRatio;
                        }
                        break;
                    }
                case MoveDir.DownLeft:
                    {
                        tempCropHeight = initCropHeight + delta;
                        tempCropWidth = initCropWidth - deltaX;
                        if (RequireAspectRatio)
                        {
                            tempCropWidth = tempCropHeight / AspectRatio;
                            deltaX = initCropWidth - tempCropWidth;
                        }
                        xtemp = prevPosX + deltaX;
                        break;
                    }
                case MoveDir.DownRight:
                    {
                        tempCropHeight = initCropHeight + delta;
                        tempCropWidth = initCropWidth + deltaX;
                        if (RequireAspectRatio)
                        {
                            tempCropWidth = tempCropHeight / AspectRatio;
                        }
                        break;
                    }
                default:
                    break;
            }
            if (ytemp < minposY)
            {
                outOfBox = true;
                ytemp = minposY;
            }
            if (xtemp < minposX)
            {
                outOfBox = true;
                xtemp = minposX;
            }
            if (ytemp + tempCropHeight > (minposY + imgh))
            {
                outOfBox = true;
                tempCropHeight = (minposY + imgh) - ytemp;
                if (RequireAspectRatio)
                {
                    tempCropWidth = tempCropHeight / AspectRatio;
                }
            }
            if (xtemp + tempCropWidth > (minposX + imgw))
            {
                outOfBox = true;
                tempCropWidth = (minposX + imgw) - xtemp;
                if (RequireAspectRatio)
                {
                    tempCropHeight = tempCropWidth / AspectRatio;
                }
            }
            if (tempCropHeight < minval)
            {
                tempCropHeight = minval;
                ytemp = unsavedY;
                xtemp = unsavedX;
            }
            if (tempCropWidth < minval)
            {
                tempCropWidth = minval;
                ytemp = unsavedY;
                xtemp = unsavedX;
            }
            unsavedX = xtemp;
            unsavedY = ytemp;
            unsavedCropH = tempCropHeight;
            unsavedCropW = tempCropWidth;
            cropperStyle = $"top:{ytemp}px;left:{xtemp}px;height:{tempCropHeight}px;width:{tempCropWidth}px";
            cropedImgStyle = $"clip: rect({ytemp - layoutY}px, {xtemp - layoutX + tempCropWidth}px, {ytemp - layoutY + tempCropHeight}px, {xtemp - layoutX}px);";
        }
        OnDragging(args);
        base.StateHasChanged();
    }
    void OnSizeChangeEnd(MouseEventArgs args)
    {
        if (reSizing)
        {
            reSizing = false;
            OnSizeChanging(args);
            var delta = args.ClientY - offsetY;
            var deltaX = args.ClientX - offsetX;
            if (outOfBox)
            {
                initCropHeight = unsavedCropH;
                initCropWidth = unsavedCropW;
                prevPosY = unsavedY;
                prevPosX = unsavedX;
                return;
            }
            switch (dir)
            {
                case MoveDir.Up:
                    {
                        prevPosY = prevPosY + delta;
                        initCropHeight -= delta;
                        if (RequireAspectRatio)
                        {
                            initCropWidth = initCropHeight / AspectRatio;
                        }
                        break;
                    }
                case MoveDir.Down:
                    {
                        initCropHeight += delta;
                        if (RequireAspectRatio)
                        {
                            initCropWidth = initCropHeight / AspectRatio;
                        }
                        break;
                    }
                case MoveDir.Left:
                    {
                        prevPosX += deltaX;
                        initCropWidth -= deltaX;
                        if (RequireAspectRatio)
                        {
                            initCropHeight = initCropWidth * AspectRatio;
                        }
                        break;
                    }
                case MoveDir.Right:
                    {
                        initCropWidth += deltaX;
                        if (RequireAspectRatio)
                        {
                            initCropHeight = initCropWidth * AspectRatio;
                        }
                        break;
                    }
                case MoveDir.UpLeft:
                    {
                        prevPosY = prevPosY + delta;
                        initCropHeight -= delta;
                        if (RequireAspectRatio)
                        {
                            var ori = initCropWidth;
                            initCropWidth = initCropHeight / AspectRatio;
                            deltaX = ori - initCropWidth;
                            prevPosX += deltaX;
                        }
                        else
                        {
                            prevPosX += deltaX;
                            initCropWidth -= deltaX;
                        }
                        break;
                    }
                case MoveDir.UpRight:
                    {
                        prevPosY = prevPosY + delta;
                        initCropHeight -= delta;
                        initCropWidth += deltaX;
                        if (RequireAspectRatio)
                        {
                            initCropWidth = initCropHeight / AspectRatio;
                        }
                        break;
                    }
                case MoveDir.DownLeft:
                    {
                        initCropHeight += delta;
                        if (RequireAspectRatio)
                        {
                            var ori = initCropWidth;
                            initCropWidth = initCropHeight / AspectRatio;
                            deltaX = ori - initCropWidth;
                            prevPosX += deltaX;
                        }
                        else
                        {
                            prevPosX += deltaX;
                            initCropWidth -= deltaX;
                        }
                        break;
                    }
                case MoveDir.DownRight:
                    {
                        initCropHeight += delta;
                        initCropWidth += deltaX;
                        if (RequireAspectRatio)
                        {
                            initCropWidth = initCropHeight / AspectRatio;
                        }
                        break;
                    }
                default:
                    break;
            }
            if (initCropHeight < minval)
            {
                initCropHeight = minval;
            }
            if (initCropWidth < minval)
            {
                initCropWidth = minval;
            }
        }
        if (dragging)
        {
            OnDragEnd(args);
        }
        SizeChanged();
    }
    Task SizeChanged()
    {
        var i = GetI();
        var resizeProp = 1d;
        var cw = (initCropWidth / i);
        var ch = (initCropHeight / i);
        if (cw > MaxCropedWidth || ch > MaxCropedHeight)
        {
            if (MaxCropedWidth / MaxCropedHeight > (double)cw / (double)ch)
            {
                resizeProp = MaxCropedHeight / ch;
            }
            else
            {
                resizeProp = MaxCropedWidth / cw;
            }
        }
        return OnSizeChanged.InvokeAsync((cw*resizeProp,ch*resizeProp));
    }
    TouchEventArgs MouseToTouch(MouseEventArgs args)
    {
        return new TouchEventArgs
        {
            Touches = new[]{
                new TouchPoint{
                ClientX = args.ClientX,
                ClientY = args.ClientY
            }
            }
        };
    }
    void ResizeBac(double i)
    {
        var temp = imgSize;
        if (imgSize * i < 100 && i < 1)
        {
            return;
        }
        if ((imgRealW * i > imgContainerWidth) && (imgRealH * i > imgContainerHeight) && i > 1)
        {
            return;
        }
        imgSize *= i;




        if (widerThanContainer)
        {
            minposX = 0;
            minposY = (imgContainerHeight - imgRealH) / 2;
        }
        else
        {
            minposY = 0;
            minposX = (imgContainerWidth - imgRealW) / 2;
        }
        minposY += bacy - (imgSize - temp) / imgSize * imgRealH / 2;
        minposX += bacx;
        if (prevPosX + initCropWidth > minposX + imgRealW || prevPosX < minposX
            || prevPosY + initCropHeight > minposY + imgRealH || prevPosY < minposY)
        {
            imgSize /= i;
        }
        else
        {
            bacy -= (i - 1) * imgRealH / 2;
            layoutY -= (i - 1) * imgRealH / 2;
            SetCroppedImgStyle();
        }
    }
    void OnResizeBackGroundImage(TouchEventArgs args)
    {
        if (args.Touches.Length == 1)
        {
            if (!isBacMoving)
            {
                return;
            }
            var dx = args.Touches[0].ClientX - prevBacX;
            var dy = args.Touches[0].ClientY - prevBacY;
            if (widerThanContainer)
            {
                minposX = 0;
                minposY = (imgContainerHeight - imgRealH) / 2;
            }
            else
            {
                minposY = 0;
                minposX = (imgContainerWidth - imgRealW) / 2;
            }
            minposY += bacy + dy;
            minposX += bacx + dx;
            bacx += dx;
            bacy += dy;
            layoutX += dx;
            layoutY += dy;
            if (prevPosX + initCropWidth > minposX + imgRealW || prevPosX < minposX)
            {
                bacx -= dx;
                layoutX -= dx;
                minposX -= bacx;
            }
            if (prevPosY + initCropHeight > minposY + imgRealH || prevPosY < minposY)
            {
                bacy -= dy;
                layoutY -= dy;
                minposY -= bacy;
            }
            SetCroppedImgStyle();
            prevBacX = args.Touches[0].ClientX;
            prevBacY = args.Touches[0].ClientY;
        }
        if (args.Touches.Length != 2)
        {
            return;
        }
        // two finger resize
        var distance = Math.Pow((args.Touches[0].ClientX - args.Touches[1].ClientX), 2) +
            Math.Pow((args.Touches[0].ClientY - args.Touches[1].ClientY), 2);
        if (onTwoFingerResizing)
        {
            var i = distance / prevTouchPointDistance;
            ResizeBac(i);
            Ratio = imgSize / 100;
        }
        else
        {
            onTwoFingerResizing = true;
        }
        prevTouchPointDistance = distance;

    }
    async Task SetImgContainterSize()
    {
        var t = await JSRuntime.InvokeAsync<double[]>("getWidthHeight");
        // in the case that container has not yet loaded 
        while (t[0] == 0)
        {
            await Task.Delay(10);
            t = await JSRuntime.InvokeAsync<double[]>("getWidthHeight");
        }
        imgContainerWidth = t[0];
        imgContainerHeight = t[1];
        InitStyles();
    }
    void InitBox()
    {
        var prevPosX = 0d;
        var prevPosY = 0d;
        if (widerThanContainer)
        {
            prevPosY = (imgContainerHeight - imgRealH) / 2;
            prevPosX = 0;
        }
        else
        {
            prevPosX = Math.Abs(imgContainerWidth - imgRealW) / 2;
            prevPosY = 0;
        }
        prevPosY += bacy;
        prevPosX += bacx;
        minposX = prevPosX;
        minposY = prevPosY;
        imgw = imgRealW;
        imgh = imgRealH;
    }
    void InitStyles()
    {
        var i = 0d;
        if (widerThanContainer)
        {
            i = imgContainerWidth / image.Width;
            prevPosY = (imgContainerHeight - imgRealH) / 2;
            prevPosX = 0;
        }
        else
        {
            i = imgContainerHeight / image.Height;
            prevPosX = Math.Abs(imgContainerWidth - imgRealW) / 2;
            prevPosY = 0;
        }
        prevPosY += bacy;
        prevPosX += bacx;
        minposX = prevPosX;
        minposY = prevPosY;
        imgw = imgRealW;
        imgh = imgRealH;
        if (initCropHeight > imgh)
        {
            initCropHeight = imgh;
        }
        if (initCropWidth > imgw)
        {
            initCropWidth = imgw;
        }

        SetCropperStyle();
        SetCroppedImgStyle();
        base.StateHasChanged();
    }
    #endregion
}
<style>
.unSelectAble{
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -o-user-select: none;
    user-select: none;
    touch-action: none;
    -ms-touch-action: none;
}

.image-list{
    position: relative;
    width: 500%;
    left: -200%;
    background-color: grey;
    overflow: hidden;
}

.imgbac{
    opacity: 0.5;
    position: absolute;
    object-fit: contain;
    width: 100%;
    height: 100%;

}
.img{
    position: absolute;
    clip: rect(0, 150px, 150px, 0);
    cursor: move;
    object-fit: contain;
    width: 100%;
    height: 100%;
}
#mainBox {
    border: 1px solid white;
    position: absolute;
    width: 150px;
    height: 150px;
    cursor: move!important;
}

.minBox {
    position: absolute;
    height: 12px;
    width: 12px;
    background-color: white;
}

.left-up {
    top: -6px;
    left: -6px;
    cursor: nw-resize;
}

.up {
    left: 50%;
    margin-left: -6px;
    top: -6px;
    cursor: n-resize;
}

.right-up {
    right: -6px;
    top: -6px;
    cursor: ne-resize;
}

.left {
    top: 50%;
    margin-top: -6px;
    left: -6px;
    cursor: w-resize;
}

.right {
    top: 50%;
    margin-top: -6px;
    right: -6px;
    cursor: w-resize;
}

.left-down {
    bottom: -6px;
    left: -6px;
    cursor: sw-resize;
}

.down {
    bottom: -6px;
    left: 50%;
    margin-left: -6px;
    cursor: s-resize;
}

.right-down {
    bottom: -6px;
    right: -6px;
    cursor: se-resize;
}
@@media screen and (max-width: 1080px) {
    .right-down,.left-down,.left-up,.right-up{
        z-index: 99;
    }
    .right,.left,.down,.up{
        display: none;
    }
}
</style>
